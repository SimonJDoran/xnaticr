/********************************************************************
* Copyright (c) 2015, Institute of Cancer Research
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 
* (1) Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
* 
* (2) Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
* 
* (3) Neither the name of the Institute of Cancer Research nor the
*     names of its contributors may be used to endorse or promote
*     products derived from this software without specific prior
*     written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/********************************************************************
* @author Simon J Doran
* Java class: AnonScriptWindow.java
* First created on Oct 20, 2015
* 
* Anonymisation script editing window
*********************************************************************/
package sessionExporter;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import static sessionExporter.AnonymiseAndSend.DEFAULT_SUBJ_NAME;
import static sessionExporter.AnonymiseAndSend.DEFAULT_SUBJ_ID;
import xnatDAO.XNATProfile;

public class AnonScriptWindow extends javax.swing.JDialog
{
	private File             chooserCurrentDir = null;
	private File             anonScriptFile    = null;
	protected static Logger  logger = Logger.getLogger(AnonymiseAndSend.class);
   private AnonymiseAndSend caller;
	
	/**
	 * Create a new instance of the anonymisation script editing window
	 * @param parent
	 * @param modal
	 * @param anonScriptFile 
	 */
	public AnonScriptWindow(java.awt.Frame parent, boolean modal, AnonymiseAndSend caller)
	{
		super(parent, modal);
      this.caller = caller;
      
      initComponents();	
      addListeners();
      populateScriptJComboBox();
      loadJButton.setEnabled(false);
      saveJButton.setEnabled(true);
      populateAnonScriptJTextArea();
      setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jScrollPane1 = new javax.swing.JScrollPane();
      anonScriptJTextArea = new javax.swing.JTextArea();
      anonScriptJLabel = new javax.swing.JLabel();
      iconJLabel = new javax.swing.JLabel();
      cancelJButton = new javax.swing.JButton();
      saveJButton = new javax.swing.JButton();
      loadJButton = new javax.swing.JButton();
      approveJButton = new javax.swing.JButton();
      scriptJComboBox = new javax.swing.JComboBox<>();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

      anonScriptJTextArea.setColumns(20);
      anonScriptJTextArea.setRows(5);
      jScrollPane1.setViewportView(anonScriptJTextArea);

      anonScriptJLabel.setFont(anonScriptJLabel.getFont().deriveFont(anonScriptJLabel.getFont().getStyle() | java.awt.Font.BOLD, anonScriptJLabel.getFont().getSize()+7));
      anonScriptJLabel.setText("Anonymisation Script");

      iconJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xnatDAO/projectResources/ICR_DataExporter_small.png"))); // NOI18N

      cancelJButton.setText("Cancel");

      saveJButton.setText("Save ...");

      loadJButton.setText("Load ...");

      approveJButton.setText("Approve");

      scriptJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(iconJLabel)
                  .addGap(30, 30, 30)
                  .addComponent(anonScriptJLabel)
                  .addGap(0, 336, Short.MAX_VALUE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGap(25, 25, 25)
                  .addComponent(scriptJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(loadJButton)
                  .addGap(18, 18, 18)
                  .addComponent(saveJButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(approveJButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(cancelJButton)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(anonScriptJLabel)
               .addComponent(iconJLabel))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cancelJButton)
               .addComponent(saveJButton)
               .addComponent(loadJButton)
               .addComponent(approveJButton)
               .addComponent(scriptJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

	private void addListeners()
   {
		cancelJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
            dispose();
			}	  
		});
      
      
      approveJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
            caller.anonScriptVerified = true;
            dispose();
			}	  
		});
		
		
		saveJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
				saveAnonymisationScript();
			}	  
		});
		
		
		loadJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
				loadAnonymisationScript();
			}	  
		});
      
      

      scriptJComboBox.addPopupMenuListener(new PopupMenuListener()
		{
			@Override
			public void popupMenuWillBecomeVisible(PopupMenuEvent e)
         {
            
            populateAnonScriptJTextArea();
			}
         			
			@Override
			public void popupMenuWillBecomeInvisible(PopupMenuEvent e){}
			
			@Override
			public void popupMenuCanceled(PopupMenuEvent e){}
      });
	}

	
   private void populateScriptJComboBox()
   {
      DefaultComboBoxModel scriptDcbm  = new DefaultComboBoxModel();
      scriptDcbm.addElement("Simple (retain significant metadata)");
      scriptDcbm.addElement("Internal ICR (thorough)");
      scriptDcbm.addElement("External use (very thorough)");
      scriptDcbm.addElement("Custom");
      scriptDcbm.setSelectedItem(1);
      scriptJComboBox.setModel(scriptDcbm);
      scriptJComboBox.setSelectedIndex(0);
   }
   
   
   private void populateAnonScriptJTextArea()
	{
		String resourceErrMsg   = "Couldn't read default anonymisation script.\n"
                                + "This shouldn't happen as it resource is supposed"
				                    + "to be packaged with the application jar!";
		String      fileErrMesg = "Couldn't read selected anonymisation script file.\n";
		String      anonScript;
		InputStream resourceIs;
		
		int selectedScript = scriptJComboBox.getSelectedIndex();
      
      if (selectedScript < scriptJComboBox.getItemCount()-1)
		{
         // One of the default scripts
         
         String[] defaultScriptNames = {"anonScriptSimple.das", "anonScriptInternal.das", "anonScriptExternal.das"};
			resourceIs = AnonymiseAndSend.class.getResourceAsStream(defaultScriptNames[selectedScript]);
			if (resourceIs == null)
			{
				logger.error(resourceErrMsg);
				throw new RuntimeException(resourceErrMsg);
			}
			try
			{
				anonScript = IOUtils.toString(resourceIs, "UTF-8");		
			}
			catch (IOException exIO)
			{
				logger.error(resourceErrMsg + "\n" + exIO.getMessage());
				throw new RuntimeException(resourceErrMsg + "\n" + exIO.getMessage());
			}
		}		
		
      else
		{
         // A custom script
         
         if (anonScriptFile == null) anonScript = "";
         else
         {
            try
            {
               FileInputStream fis = new FileInputStream(anonScriptFile);
               anonScript = IOUtils.toString(fis, "UTF-8");		
            }
            catch (IOException exIO)
            {
               JOptionPane.showMessageDialog(this,
                                             "Error reading anonymisation script file" + anonScriptFile.getName(),
                                             "File open error",
                                             JOptionPane.ERROR_MESSAGE);
               anonScript = "";
            }
         }
		}
		
		anonScriptJTextArea.setText(anonScript);
	}
   
      
      
	protected void loadAnonymisationScript()
	{
		Object[] options = {"Cancel", "Reselect...", "Confirm"};
		int      choice;
		String   anonScript;
		do
		{
			choice  = 2;
			
			JFileChooser chooser = new JFileChooser();
		
			FileFilter   filter  = new FileNameExtensionFilter("Anon script (*.das)","das");
			chooser.addChoosableFileFilter(filter);
			chooser.setFileFilter(filter);
			chooser.setCurrentDirectory(chooserCurrentDir);
			chooser.setApproveButtonText("Open");
			chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

			int returnVal  = chooser.showOpenDialog(this);
			chooserCurrentDir = chooser.getCurrentDirectory();
			if (returnVal != JFileChooser.APPROVE_OPTION) return;
			
			String          fileErrMsg = "Couldn't open anonymisation script file chosen.\n";
			File            chosenFile = chooser.getSelectedFile();
			FileInputStream fis;
			try
			{
				fis = new FileInputStream(chooser.getSelectedFile());
				if (chosenFile.length() < 10000) anonScript = IOUtils.toString(fis, "UTF-8");
				else anonScript = null;
			}
			catch (IOException exIO)
			{
				logger.error(fileErrMsg);
				throw new RuntimeException(fileErrMsg);
			}
			
			// Check for pathological case of user selecting a very large non-text
			// file by mistake.
			if (chosenFile.length() >= 10000)
			{
				logger.warn("Script file larger than expected.");
				
				choice  = JOptionPane.showOptionDialog(this,
						  "The anonymisation script file was larger than expected.\n"
						  + "Please confirm that this file is correct or reselect",
						  "Script larger than expected",
						  JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[1]);
				
				if ((choice == 0) || (choice == JOptionPane.CLOSED_OPTION)) return;
			}
		}
		while (choice != 2);
		
		populateAnonScriptJTextArea();
	}
	
	protected void saveAnonymisationScript()
	{
		String   fileErrMsg = "Couldn't write anonymisation script file chosen.";
		File     chosenFile;	
		Object[] options = {"Cancel", "Re-select...", "Overwrite"};
		int      choice;	
		do
		{
			choice  = 2;
			JFileChooser chooser = new JFileChooser();
		
			FileFilter   filter  = new FileNameExtensionFilter("Anon script (*.das)","das");
			chooser.addChoosableFileFilter(filter);
			chooser.setFileFilter(filter);
			chooser.setApproveButtonText("Save");
			chooser.setCurrentDirectory(chooserCurrentDir);
			chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			chooser.setDialogType(JFileChooser.SAVE_DIALOG);

			int returnVal  = chooser.showSaveDialog(this);
			chooserCurrentDir = chooser.getCurrentDirectory();
			if (returnVal != JFileChooser.APPROVE_OPTION) return;
					  
			chosenFile = chooser.getSelectedFile();
			
			if (chosenFile.exists())
			{
				choice  = JOptionPane.showOptionDialog(this,
						  "The anonymisation script file chosen already exists.\n"
						  + "Do you want to overwrite it?",
						  "File exists",
						  JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[1]);
				
				if ((choice == 0) || (choice == JOptionPane.CLOSED_OPTION)) return;
			}
		}
		while (choice != 2);
		
		BufferedWriter writer = null;
		try
		{
			writer = new BufferedWriter(new FileWriter(chosenFile));
			writer.write(anonScriptJTextArea.getText());
		}
		catch (IOException exIO)
		{
			JOptionPane.showConfirmDialog(this, "There was an error writing out your anonymisation\n"
					                              + "script to file. Please check your file permissions.");
			logger.error(exIO.getMessage());
		}
		finally
		{
			try {writer.close();}
			catch (IOException exIgnore){}		
		}
	}
	
	

   public JButton getVerifyJButton()
   {
      return approveJButton; 
   }
	
	
	public String getScriptText()
	{
		return anonScriptJTextArea.getText();
	}
	
	
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel anonScriptJLabel;
   private javax.swing.JTextArea anonScriptJTextArea;
   private javax.swing.JButton approveJButton;
   private javax.swing.JButton cancelJButton;
   private javax.swing.JLabel iconJLabel;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JButton loadJButton;
   private javax.swing.JButton saveJButton;
   private javax.swing.JComboBox<String> scriptJComboBox;
   // End of variables declaration//GEN-END:variables
}
