/********************************************************************
* Copyright (c) 2015, Institute of Cancer Research
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 
* (1) Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
* 
* (2) Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
* 
* (3) Neither the name of the Institute of Cancer Research nor the
*     names of its contributors may be used to endorse or promote
*     products derived from this software without specific prior
*     written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/********************************************************************
* @author Simon J Doran
* Java class: AnonymiseAndSend.java
* First created on Feb 12, 2015
* 
* Anonymisation GUI allowing users to route a downloaded session to
* a different XNAT instance and project.
*********************************************************************/

package sessionExporter;

import generalUtilities.SimpleColourTable;
import imageUtilities.DownloadIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import xnatDAO.PermissionsWorker;
import xnatDAO.ProjectGetter;
import xnatDAO.XNATProfile;

/**
 *
 * @author simond
 */
public class AnonymiseAndSend extends xnatDAO.XNATGUI implements ProjectGetter
{
	protected XNATProfile         destProf;
	protected XNATProfile         srcProf;
	protected ArrayList<String>   srcSess;
	protected File                chooserCurrentDir = null;
	protected static Logger       logger = Logger.getLogger(AnonymiseAndSend.class);
	protected static final String DEFAULT_SUBJ_CODE = "Anonymised Subject";
	protected static final String SUBJ_TOKEN = "<AUTO-GENERATED-SUBJECT>";
	protected static final String PROJ_TOKEN = "<AUTO-GENERATED-PROJECT>";

	/**
	 * Creates new form AnonymiseAndSend
	 */
	public AnonymiseAndSend(java.awt.Frame parent, boolean modal,
			                  XNATProfile srcProf, ArrayList<String> srcSess)
	{
		super(parent, modal);
		
		this.srcProf = srcProf;
		this.srcSess = srcSess;

      initComponents();
      versionJLabel.setText("Version " + version);
		checkAccessJLabel.setVisible(false);
		subjJTextField.setText(DEFAULT_SUBJ_CODE);
		
      addListeners();
      implementRestrictions();
      populateComponents();
	}
	
	
	/**
    * Add the listeners that allow actions to be implemented when the
 users click on relevant options.
    */
   private void addListeners()
   {
		cancelJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
				dispose();
			}	  
		});
		
		saveJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
				saveAnonymisationScript();
			}	  
		});
		
		
		loadJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
				loadAnonymisationScript();
			}	  
		});
		
		
		exportJButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{            
				exportData();
			}	  
		});
		
		
		destProfileJComboBox.addItemListener(new ItemListener()
      {
         @Override
         public void itemStateChanged(ItemEvent evt)
         {
            profileJComboBoxItemStateChanged(evt, true);
         }
      });
		
		
		destProjectJComboBox.addPopupMenuListener(new PopupMenuListener()
		{
			@Override
			public void popupMenuWillBecomeVisible(PopupMenuEvent e)
			{
				destProjectComboBoxClicked();
			}
			
			@Override
			public void popupMenuWillBecomeInvisible(PopupMenuEvent e){}
			
			@Override
			public void popupMenuCanceled(PopupMenuEvent e){}
		});
	}
	
	
	/**
    * Method allowing subclasses to take specific action when the
    * profile has been changed.
    */
   @Override
   protected void profileChangeConcreteClassActions()
   {
      if (selectedProfileDidChange)
      {
         selectedProfileDidChange = false;
			destProf = profileList.getCurrentProfile();
			if (!destProf.isConnected()) destProf.connectWithAuthentication(this);
			
			// Fake an item event so that we can call the code for changing the profile
			// in order to set the correct colour post authentication.
			ItemEvent fakeEvt = new ItemEvent(destProfileJComboBox,
					                            ItemEvent.ITEM_FIRST,
					                            destProfileJComboBox,
			                                  ItemEvent.SELECTED);
			ignoreItemChange = false;
			profileJComboBoxItemStateChanged(fakeEvt, false);
			retrieveProjectList();
      }
   }
	
	
	/**
	 * This little function is needed to cope with the first use of the tool
	 * when the project combo box is not populated because the user is not
	 * authenticated on the remote database
	 */
	protected void destProjectComboBoxClicked()
	{
		destProf = profileList.getCurrentProfile();
		if (!destProf.isConnected())
		{
			destProf.connectWithAuthentication(this);
			// Fake an item event so that we can call the code for changing the profile
			// in order to set the correct colour.
			ItemEvent fakeEvt = new ItemEvent(destProjectJComboBox,
					                            ItemEvent.ITEM_FIRST,
					                            destProfileJComboBox,
			                                  ItemEvent.SELECTED);
			profileJComboBoxItemStateChanged(fakeEvt, false);
			retrieveProjectList();
		}		
	}
	
	
	protected void retrieveProjectList()
	{
		// Retrieve list of projects and populate combo box.
			checkAccessJLabel.setVisible(true);
			DownloadIcon getPermsIcon = new DownloadIcon(checkAccessJLabel);
			checkAccessJLabel.setIcon(getPermsIcon);
			checkAccessJLabel.setVisible(true);
			getPermsIcon.start();
		
			// Note that when the PermissionsWorker finishes executing, it calls the
			// method that populates the combo box with the projects discovered.
			(new PermissionsWorker(this, false)).execute();
	}
	
	
	protected void loadAnonymisationScript()
	{
		Object[] options = {"Cancel", "Reselect...", "Confirm"};
		int      choice;
		String   anonScript;
		do
		{
			choice  = 2;
			
			JFileChooser chooser = new JFileChooser();
		
			FileFilter   filter  = new FileNameExtensionFilter("Anon script (*.das)","das");
			chooser.addChoosableFileFilter(filter);
			chooser.setFileFilter(filter);
			chooser.setCurrentDirectory(chooserCurrentDir);
			chooser.setApproveButtonText("Open");
			chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

			int returnVal  = chooser.showOpenDialog(this);
			chooserCurrentDir = chooser.getCurrentDirectory();
			if (returnVal != JFileChooser.APPROVE_OPTION) return;
			
			String          fileErrMsg = "Couldn't open anonymisation script file chosen.\n"
				                          + "This shouldn't happen, since the file has been"
		                                + "chosen with a JFileChooser.";
			File            chosenFile = chooser.getSelectedFile();
			FileInputStream fis;
			try
			{
				fis = new FileInputStream(chooser.getSelectedFile());
				if (chosenFile.length() < 10000) anonScript = IOUtils.toString(fis, "UTF-8");
				else anonScript = null;
			}
			catch (IOException ex)
			{
				logger.error(fileErrMsg);
				throw new RuntimeException(fileErrMsg);
			}
			
			// Check for pathological case of user selecting a very large non-text
			// file by mistake.
			if (chosenFile.length() >= 10000)
			{
				logger.warn("Script file larger than expected.");
				
				choice  = JOptionPane.showOptionDialog(this,
						  "The anonymisation script file was larger than expected.\n"
						  + "Please confirm that this file is correct or reselect",
						  "Script larger than expected",
						  JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[1]);
				
				if ((choice == 0) || (choice == JOptionPane.CLOSED_OPTION)) return;
				if (choice == 2)
				{
					try
					{
						anonScript = IOUtils.toString(fis, "UTF-8");
					}
					catch (IOException ex)
					{
						logger.error(fileErrMsg);
						throw new RuntimeException(fileErrMsg);
					}
				}
			}
		}
		while (choice != 2);
		
		populateAnonScriptTextArea(anonScript);
	}
	
	
	
	protected void saveAnonymisationScript()
	{
		String   fileErrMsg = "Couldn't write anonymisation script file chosen.";
		File     chosenFile;	
		Object[] options = {"Cancel", "Re-select...", "Overwrite"};
		int      choice;	
		do
		{
			choice  = 2;
			JFileChooser chooser = new JFileChooser();
		
			FileFilter   filter  = new FileNameExtensionFilter("Anon script (*.das)","das");
			chooser.addChoosableFileFilter(filter);
			chooser.setFileFilter(filter);
			chooser.setApproveButtonText("Save");
			chooser.setCurrentDirectory(chooserCurrentDir);
			chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			chooser.setDialogType(JFileChooser.SAVE_DIALOG);

			int returnVal  = chooser.showSaveDialog(this);
			chooserCurrentDir = chooser.getCurrentDirectory();
			if (returnVal != JFileChooser.APPROVE_OPTION) return;
					  
			chosenFile = chooser.getSelectedFile();
			
			if (chosenFile.exists())
			{
				choice  = JOptionPane.showOptionDialog(this,
						  "The anonymisation script file chosen already exists.\n"
						  + "Do you want to overwrite it?",
						  "File exists",
						  JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[1]);
				
				if ((choice == 0) || (choice == JOptionPane.CLOSED_OPTION)) return;
			}
		}
		while (choice != 2);
		
		BufferedWriter writer = null;
		try
		{
			writer = new BufferedWriter(new FileWriter(chosenFile));
			writer.write(anonScriptJTextArea.getText());
		}
		catch (IOException exIO)
		{
			JOptionPane.showConfirmDialog(this, "There was an error writing out your anonymisation\n"
					                              + "script to file. Please check your file permissions.");
			logger.error(exIO.getMessage());
		}
		finally
		{
			try {writer.close();}
			catch (IOException exIgnore){}		
		}
	}
	
	
	protected void exportData()
	{
		String templateScript = anonScriptJTextArea.getText();
		
		// Check whether the subject name still has the default value.
		String subjCode   = subjJTextField.getText();
		if (subjCode.equals(DEFAULT_SUBJ_CODE))
		{
			Object[] options = { "Continue", "Cancel" };
			int choice =JOptionPane.showOptionDialog(this,
					                       "You have not changed the subject name\n"
					                       + "away from its default value", "Warning",
			                             JOptionPane.DEFAULT_OPTION,
												  JOptionPane.WARNING_MESSAGE,
			                             null, options, options[0]);
			if (choice == 1) return;
		}
		
		String anonScript = templateScript.replaceAll(SUBJ_TOKEN, subjCode)
		                                  .replaceAll(PROJ_TOKEN, (String) destProjectJComboBox.getSelectedItem());

	
	}
	
	final void populateComponents()
	{
		srcProfileJTextField.setText(srcProf.getProfileName());
		srcSessionsJTextArea.setText(getSessionsAsString());
		populateAnonScriptTextArea(null);
		populateProfileJComboBox();
	}
	
	
	@Override
	public void populateProjectJComboBox(ArrayList<String> accessible)
	{
		DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
      destProjectJComboBox.setModel(dcbm);

      for (String projectName : accessible) dcbm.addElement(projectName);
      
      if (accessible.get(0).equals(PermissionsWorker.NO_PROJECTS) ||
          accessible.get(0).equals(PermissionsWorker.NOT_CONNECTED))
      {
         destProjectJComboBox.setForeground(SimpleColourTable.getColour("ICR red"));
      }
      else
		{
			destProjectJComboBox.setForeground(SimpleColourTable.getColour("black"));
         destProjectJComboBox.setSelectedItem(PermissionsWorker.ALL_PROJECTS);
		}

      checkAccessJLabel.setVisible(false);
      ((DownloadIcon) checkAccessJLabel.getIcon()).stop();
	}
	
	
	protected void populateAnonScriptTextArea(String anonScript)
	{
		String resourceErrMsg = "Couldn't read default anonymisation script.\n"
                              + "This shouldn't happen as it resource is supposed"
				                  + "to be packaged with the application jar!";
				
		InputStream resourceIs;
		
		if (anonScript == null)
		{
			resourceIs = AnonymiseAndSend.class.getResourceAsStream("anonSendSession.das");
			if (resourceIs == null)
			{
				logger.error(resourceErrMsg);
				throw new RuntimeException(resourceErrMsg);
			}
			try
			{
				anonScript = IOUtils.toString(resourceIs, "UTF-8");		
			}
			catch (IOException exIO)
			{
				logger.error(resourceErrMsg + "\n" + exIO.getMessage());
				throw new RuntimeException(resourceErrMsg + "\n" + exIO.getMessage());
			}
		}
		
		anonScriptJTextArea.setText(anonScript);
	}
		
		
	protected String getSessionsAsString()
	{
		StringBuilder sb = new StringBuilder();
		for (String s : srcSess) sb.append(s).append("\n");
		// Last newline character is never needed.
		return sb.substring(0, sb.length()-1);
	}
	
	
	@Override
	public XNATProfile getProfile()
	{
		return destProf;
	}
	
	
	@Override
   public JComboBox getProfileJComboBox()
   {
      return destProfileJComboBox;
   }
	
	
	@Override
	public JComboBox getDataTypeJComboBox()
	{
		return new JComboBox();
	}
	
	
	@Override
	public JComboBox getDataSubtypeJComboBox()
	{
		return new JComboBox();
	}
	
	@Override
	public void implementRestrictions()
	{
		
	}

	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      ICRLogoJLabel = new javax.swing.JLabel();
      titleLabel = new javax.swing.JLabel();
      versionJLabel = new javax.swing.JLabel();
      poweredByXNATJLabel = new javax.swing.JLabel();
      destProfileJLabel = new javax.swing.JLabel();
      destProfileJComboBox = new javax.swing.JComboBox();
      destProjectJLabel = new javax.swing.JLabel();
      destProjectJComboBox = new javax.swing.JComboBox();
      dataToExportJLabel = new javax.swing.JLabel();
      srcProfileJLabel = new javax.swing.JLabel();
      srcSessionsJLabel = new javax.swing.JLabel();
      srcProfileJTextField = new javax.swing.JLabel();
      dataDestinationJLabel = new javax.swing.JLabel();
      anonScriptJLabel = new javax.swing.JLabel();
      anonScriptJScrollPane = new javax.swing.JScrollPane();
      anonScriptJTextArea = new javax.swing.JTextArea();
      cancelJButton = new javax.swing.JButton();
      exportJButton = new javax.swing.JButton();
      loadJButton = new javax.swing.JButton();
      saveJButton = new javax.swing.JButton();
      exportProgressJLabel = new javax.swing.JLabel();
      exportProgressJScrollPane = new javax.swing.JScrollPane();
      logJTextArea = new javax.swing.JTextArea();
      exportJProgressBar = new javax.swing.JProgressBar();
      srcSessionsJScrollPane = new javax.swing.JScrollPane();
      srcSessionsJTextArea = new javax.swing.JTextArea();
      checkAccessJLabel = new javax.swing.JLabel();
      destSubjLabel = new javax.swing.JLabel();
      subjJTextField = new javax.swing.JTextField();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

      ICRLogoJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xnatDAO/projectResources/ICR_fibonacci_logo.jpg"))); // NOI18N

      titleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 28)); // NOI18N
      titleLabel.setText("Data Exporter");

      versionJLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
      versionJLabel.setText("2.0 alpha (3/2/2015)");

      poweredByXNATJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xnatDAO/projectResources/powered_by_XNAT.jpg"))); // NOI18N

      destProfileJLabel.setText("XNAT Profile");

      destProfileJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a profile ..." }));

      destProjectJLabel.setText("XNAT Project");

      destProjectJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a project ..." }));

      dataToExportJLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
      dataToExportJLabel.setText("Data to export");

      srcProfileJLabel.setText("XNAT Profile");

      srcSessionsJLabel.setText("XNAT Session(s)");

      srcProfileJTextField.setText("No profile specified");

      dataDestinationJLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
      dataDestinationJLabel.setText("Data destination");

      anonScriptJLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
      anonScriptJLabel.setText("Anonymisation script");

      anonScriptJTextArea.setColumns(20);
      anonScriptJTextArea.setRows(5);
      anonScriptJScrollPane.setViewportView(anonScriptJTextArea);

      cancelJButton.setText("Cancel");

      exportJButton.setText("Export");

      loadJButton.setText("Load ...");

      saveJButton.setText("Save ...");

      exportProgressJLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
      exportProgressJLabel.setText("Export progress");

      logJTextArea.setEditable(false);
      logJTextArea.setColumns(20);
      logJTextArea.setRows(5);
      exportProgressJScrollPane.setViewportView(logJTextArea);

      srcSessionsJTextArea.setEditable(false);
      srcSessionsJTextArea.setColumns(20);
      srcSessionsJTextArea.setRows(5);
      srcSessionsJScrollPane.setViewportView(srcSessionsJTextArea);

      checkAccessJLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
      checkAccessJLabel.setText("Checking project access");

      destSubjLabel.setText("XNAT Subject ID");

      subjJTextField.setText("Enter anonymisation subject code.");
      subjJTextField.setToolTipText("");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(25, 25, 25)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(destSubjLabel)
                  .addGap(18, 18, 18)
                  .addComponent(subjJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(ICRLogoJLabel)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(versionJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                  .addGap(100, 100, 100)
                  .addComponent(poweredByXNATJLabel)
                  .addGap(24, 24, 24))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(srcSessionsJLabel)
                     .addComponent(srcProfileJLabel)
                     .addComponent(destProfileJLabel)
                     .addComponent(destProjectJLabel))
                  .addGap(18, 18, 18)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(destProfileJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(destProjectJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(layout.createSequentialGroup()
                              .addGap(0, 91, Short.MAX_VALUE)
                              .addComponent(exportJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addComponent(checkAccessJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(srcProfileJTextField)
                           .addComponent(srcSessionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(exportJProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(exportProgressJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))))
                  .addGap(14, 14, 14))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(dataDestinationJLabel)
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(anonScriptJLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                     .addComponent(anonScriptJScrollPane))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(loadJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(saveJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(cancelJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(12, 12, 12))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(dataToExportJLabel)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(exportProgressJLabel)
                  .addGap(73, 73, 73))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(ICRLogoJLabel)
               .addGroup(layout.createSequentialGroup()
                  .addGap(22, 22, 22)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(poweredByXNATJLabel)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGap(44, 44, 44)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(dataToExportJLabel)
               .addComponent(exportProgressJLabel))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(srcProfileJTextField)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(exportProgressJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(srcProfileJLabel)
                     .addGap(18, 18, 18)
                     .addComponent(srcSessionsJLabel))
                  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                     .addGap(34, 34, 34)
                     .addComponent(srcSessionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(exportJProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(13, 13, 13)
            .addComponent(dataDestinationJLabel)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(destProfileJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(exportJButton)
               .addComponent(destProfileJLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(destProjectJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(destProjectJLabel)
               .addComponent(checkAccessJLabel))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(destSubjLabel)
               .addComponent(subjJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
            .addComponent(anonScriptJLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(saveJButton)
                  .addGap(8, 8, 8)
                  .addComponent(loadJButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(cancelJButton))
               .addComponent(anonScriptJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

//	/**
//	 * @param args the command line arguments
//	 */
//	public static void main(String args[]) {
//		/* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//		 */
//		try {
//			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//				if ("Nimbus".equals(info.getName())) {
//					javax.swing.UIManager.setLookAndFeel(info.getClassName());
//					break;
//				}
//			}
//		} catch (ClassNotFoundException ex) {
//			java.util.logging.Logger.getLogger(AnonymiseAndSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		} catch (InstantiationException ex) {
//			java.util.logging.Logger.getLogger(AnonymiseAndSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		} catch (IllegalAccessException ex) {
//			java.util.logging.Logger.getLogger(AnonymiseAndSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
//			java.util.logging.Logger.getLogger(AnonymiseAndSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		}
//        //</editor-fold>
//
//		/* Create and display the dialog */
//		java.awt.EventQueue.invokeLater(new Runnable() {
//			public void run() {
//				AnonymiseAndSend dialog = new AnonymiseAndSend(new javax.swing.JFrame(), true);
//				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//					@Override
//					public void windowClosing(java.awt.event.WindowEvent e) {
//						System.exit(0);
//					}
//				});
//				dialog.setVisible(true);
//			}
//		});
//	}

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel ICRLogoJLabel;
   private javax.swing.JLabel anonScriptJLabel;
   private javax.swing.JScrollPane anonScriptJScrollPane;
   private javax.swing.JTextArea anonScriptJTextArea;
   private javax.swing.JButton cancelJButton;
   private javax.swing.JLabel checkAccessJLabel;
   private javax.swing.JLabel dataDestinationJLabel;
   private javax.swing.JLabel dataToExportJLabel;
   private javax.swing.JComboBox destProfileJComboBox;
   private javax.swing.JLabel destProfileJLabel;
   private javax.swing.JComboBox destProjectJComboBox;
   private javax.swing.JLabel destProjectJLabel;
   private javax.swing.JLabel destSubjLabel;
   private javax.swing.JButton exportJButton;
   private javax.swing.JProgressBar exportJProgressBar;
   private javax.swing.JLabel exportProgressJLabel;
   private javax.swing.JScrollPane exportProgressJScrollPane;
   private javax.swing.JButton loadJButton;
   private javax.swing.JTextArea logJTextArea;
   private javax.swing.JLabel poweredByXNATJLabel;
   private javax.swing.JButton saveJButton;
   private javax.swing.JLabel srcProfileJLabel;
   private javax.swing.JLabel srcProfileJTextField;
   private javax.swing.JLabel srcSessionsJLabel;
   private javax.swing.JScrollPane srcSessionsJScrollPane;
   private javax.swing.JTextArea srcSessionsJTextArea;
   private javax.swing.JTextField subjJTextField;
   private javax.swing.JLabel titleLabel;
   private javax.swing.JLabel versionJLabel;
   // End of variables declaration//GEN-END:variables

	@Override
	protected boolean allowAll()
	{
		return true;
	}

	@Override
	public void useSubtype(String subtype, Vector<String> subtypes, String subtypeAlias)
	{
		throw new UnsupportedOperationException("Not supported."); 
	}

	
	@Override
	public boolean typeIsSelectable(String type)
	{
		throw new UnsupportedOperationException("Not supported."); 
	}

	
	@Override
	public boolean subtypeIsSelectable(String subtype)
	{
		throw new UnsupportedOperationException("Not supported."); 
	}
}
