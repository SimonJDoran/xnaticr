/********************************************************************
* Copyright (c) 2012, Institute of Cancer Research
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 
* (1) Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
* 
* (2) Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
* 
* (3) Neither the name of the Institute of Cancer Research nor the
*     names of its contributors may be used to endorse or promote
*     products derived from this software without specific prior
*     written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/*********************************************************************
* @author Simon J Doran
* Java class: ParametricImageUploader.java
* First created on November 18, 2010 at 23:55 PM
* 
* Object for uploading files to XNAT that correspond to parametric
* data "maps" generated by an arbitrary post-processing application
*********************************************************************/

package xnatUploader;

import org.w3c.dom.Document;
import xnatDAO.XNATProfile;


/* Currently a stub, just created to allow some tests to take place.
 *
 */
public class ParametricImageUploader extends DataUploader
{
   public ParametricImageUploader(XNATProfile xnprf)
   {
      super(xnprf);
   }
   

   @Override
   public boolean parseFile()
   {
      XNATExperimentID = "XXXXX";
      return true;
   }
   
   
   @Override
   public void updateParseFile()
   {
      //TODO
   }


   @Override
   public void populateFields(MetadataPanel mdsp)
   {
      mdsp.populateJTextField("Associated XNAT image session ID",
                              XNATExperimentID);
   }


   @Override
   public void clearFields(MetadataPanel mdsp)
   {
      mdsp.populateJTextField("Associated XNAT image session ID", "");
   }



   @Override
   public String[] getRequiredFields()
   {
      return new String[0];
   }


   @Override
   public String getFileFormat()
   {
      return "PARAMETRIC_IMAGE_XML";
   }
   


   @Override
   public String createMetadataUploadCommand()
   {
      return "/REST/projects"  + XNATProject
             + "/experiments/" + XNATExperimentID
             + "/assessors/"   + getStringField("xnat:qcAssessmentData/label");
   }


   /**
    * Create the XML that is uploaded to XNAT and contains all the metadata
    * that will go into the PostgreSQL database.
    * @return an XNAT-compatible metadata XML Document
    */
   @Override
   public Document createMetadataXML()
   {
      return null;
   }
   
   
   @Override
   public void createAuxiliaryFiles()
   {
      
   }


   @Override
   public boolean rightMetadataPresent()
   {
      return (!XNATExperimentID.equals(""));
   }
   
   
   @Override
   public String getRootElement()
   {
      return "ReconstructedImage";
   }
   
   
   @Override
   public String getRootComplexType()
   {
      return "xnat:reconstructedImageData";
   }

}