/****************************************
 * XNATDicomLoader MiniApplication
 *
 * @author        Simon J. Doran
 * Creation date: Mar 9, 2009 at 11:23:14 AM
 *
 * Filename:      XNATDicomLoader.java
 * Package:       xnat_experiments
 ****************************************/

package obselete;

import obselete.XNATCacheElement;
import exceptions.XNATException;
import generalUtilities.Vector2D;
import java.io.File;
import java.util.Hashtable;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.Logger;
import xnatRestToolkit.XNATRESTToolkit;


public class XNATDicomLoader extends javax.swing.JFrame
{
   static  Logger                              logger;
   private XNATRESTToolkit                     xnrt;
   private XNATDicomImportRule                 xndr;
   private XNATDicomLoaderWorker               xndlw;
   private Hashtable<String, XNATCacheElement> catalogCache;
	private File                                currentDirectory;
	private String										  XNATProjectName = null;

   /** Creates new form XNATDicomLoader */
   public XNATDicomLoader()
   {
      // Set up a simple configuration that logs on the console.
      setupLogging();
      
      // Initialise the user interface
      initComponents();

      // Start off with the upload button disabled until the user has successfully
      // authenticated him or herself on the system.
      uploadButton.setEnabled(false);
      invalidPasswordLabel.setVisible(false);
		DefaultComboBoxModel model = (DefaultComboBoxModel) projectComboBox.getModel();
		model.removeAllElements();
		model.addElement("No projects - login required");
      currentFileOutputLabel.setText("<None>");

      // Read the XNAT_DICOM import rule.
      try
      {
         xndr = new XNATDicomImportRule();
      }
      catch (Exception ex)
      {
         logger.fatal("Failed to read DICOM import rule:" + ex.getMessage());
      }

		// Setup the cache containing the DICOM files already read in.
		catalogCache = new Hashtable<String, XNATCacheElement>();
      
   }



   private void setupLogging()
   {
      logger = Logger.getLogger(XNATDicomLoader.class);

      // Get the name of the logging configuration file.
      java.net.URL logFileURL = XNATDicomLoader.class.getResource("project_resources/logging_configuration.txt");

		try
		{
			PropertyConfigurator.configure(logFileURL);
		}
		catch (Exception ex)
		{
			System.out.println("XNATDicomLoader: Unable to load configuration file for logging.");
         System.out.println("Using basic console-logging configuration.");
         BasicConfigurator.configure();
         return;
		}

      logger.info("Logger started.");
   }


   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        uploadButton = new javax.swing.JButton();
        projectLabel = new javax.swing.JLabel();
        projectComboBox = new javax.swing.JComboBox();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        currentFileLabel = new javax.swing.JLabel();
        filesUploadedLabel = new javax.swing.JLabel();
        failuresLabel = new javax.swing.JLabel();
        filesUploadedOutputLabel = new javax.swing.JLabel();
        failuresOutputLabel = new javax.swing.JLabel();
        currentFileOutputLabel = new javax.swing.JLabel();
        invalidPasswordLabel = new javax.swing.JLabel();
        warningsLabel = new javax.swing.JLabel();
        warningsOutputLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        titleLabel.setText("XNAT Dicom Loader Version");

        versionLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        versionLabel.setText("0.1");

        uploadButton.setText("Choose file/directory/zip for upload...");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        projectLabel.setText("XNAT project");

        projectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        projectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboBoxActionPerformed(evt);
            }
        });

        usernameLabel.setText("XNAT username");

        passwordLabel.setText("XNAT password");

        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        currentFileLabel.setText("Current file:");

        filesUploadedLabel.setText("Files uploaded:");

        failuresLabel.setText("Failures:");

        filesUploadedOutputLabel.setText("0");

        failuresOutputLabel.setText("0");

        currentFileOutputLabel.setText(" ");

        invalidPasswordLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        invalidPasswordLabel.setForeground(new java.awt.Color(255, 0, 0));
        invalidPasswordLabel.setText("Invalid user/password");

        warningsLabel.setText("Warnings:");

        warningsOutputLabel.setText("0");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(uploadButton)
                .addGap(75, 75, 75))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(versionLabel)
                .addContainerGap(90, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectLabel)
                            .addComponent(filesUploadedLabel)
                            .addComponent(currentFileLabel))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filesUploadedOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(warningsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(warningsOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(failuresLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(failuresOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(currentFileOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(projectComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(usernameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(usernameTextField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(passwordLabel)
                                .addGap(18, 18, 18)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(invalidPasswordLabel)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(330, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(versionLabel))
                .addGap(29, 29, 29)
                .addComponent(uploadButton)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invalidPasswordLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLabel)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentFileLabel)
                    .addComponent(currentFileOutputLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filesUploadedLabel)
                    .addComponent(filesUploadedOutputLabel)
                    .addComponent(failuresLabel)
                    .addComponent(failuresOutputLabel)
                    .addComponent(warningsLabel)
                    .addComponent(warningsOutputLabel))
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



   private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed

      // Pop up a filechooser and select a base file or directory.
      JFileChooser fc = new JFileChooser();
      fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
      fc.setMultiSelectionEnabled(true);

		if (currentDirectory == null)
			currentDirectory = new File(System.getProperty("user.home"));
		fc.setCurrentDirectory(currentDirectory);

      int a = fc.showOpenDialog(this);
      if (a == JFileChooser.APPROVE_OPTION)
      {
         File[] chosenFiles = fc.getSelectedFiles();
			currentDirectory   = fc.getCurrentDirectory();

         /* Load the files in a "worker" thread.
          * Note that the underlying SwingWorker objects cannot be reused,
          * so we need to create a new instance each time.
          */
         xndlw = new XNATDicomLoaderWorker(chosenFiles,
                                           uploadButton,
                                           projectComboBox,
                                           usernameTextField,
                                           passwordField,
                                           filesUploadedOutputLabel,
                                           warningsOutputLabel,
                                           failuresOutputLabel,
                                           currentFileOutputLabel,
                                           XNATProjectName,
                                           xndr,
                                           xnrt,
                                           catalogCache);
         /* Although the user interface must remain active during the file loading
          * operation, so that the labels can be updated and the "Cancel" button
          * still works, most of the other controls need to be inactivated during
          * the load operation, as it would cause considerable confusion if new
          * operations were started, someone tried to change the XNAT project, etc.
          * Everything gets reactivated in the done() method of XNATDicomLoaderWorker,
          * which executes on the Event Dispatch Thread.
          */
         uploadButton.setEnabled(false);
         projectComboBox.setEnabled(false);
         usernameTextField.setEnabled(false);
         passwordField.setEnabled(false);

         xndlw.execute();
      }
       
}//GEN-LAST:event_uploadButtonActionPerformed



    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
		login();
    }//GEN-LAST:event_usernameTextFieldActionPerformed



    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
      login();
    }//GEN-LAST:event_passwordFieldActionPerformed



    private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
		 Object item = projectComboBox.getModel().getSelectedItem();
		 if (item == null)
			 XNATProjectName = null;
		 else
		 {
			 XNATProjectName = item.toString();
			 if (XNATProjectName.equals("No projects available"))
			 XNATProjectName = null;
		 }
    }//GEN-LAST:event_projectComboBoxActionPerformed



    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
       if (xndlw == null) System.exit(0);
       if (xndlw.getState() == SwingWorker.StateValue.DONE) System.exit(0);
       xndlw.cancel(false);
    }//GEN-LAST:event_cancelButtonActionPerformed


    private void login()
   {
		String username = usernameTextField.getText();
		if (username == null) return;
		
		/* The getText method is deprecated for JPassword field for security
		 * reasons. The Javadoc says "For stronger security, it is
		 * recommended that the returned character array be
       * cleared after use by setting each character to zero.
		 */
		char[] password = passwordField.getPassword();
		if (password == null) return;

		// Initialise the interface to the XNAT system.
      String RESTClientPath;
		if (System.getProperty("user.name").equals("simon"))
			// Home
			RESTClientPath = new String("/Library/XNAT/xnat_tools/lib/xdat-restClient-1.jar");
		else
			// Work
			RESTClientPath = new String("/Users/simond/xnat/sjd_files/xnat_tools/lib/xdat-restClient-1.jar");

//      xnrt = new XNATRESTToolkit( "localhost:8080/xnat",
//                                  username,
//                                  new String(password),
//                                  RESTClientPath);
      
//      try
//      {
// //        xnrt.getJSession();
//      }
//      catch (XNATException ex)
//      {
//         JOptionPane.showConfirmDialog(this,
//                                       "XNAT Dicom Loader is unable to obtain the required JSESSION information from the XNAT database and will now exit.",
//                                       "JSESSION error",
//                                       JOptionPane.OK_CANCEL_OPTION);
//      }
//
//		Vector2D<String> searchResult = null;
//		try
//      {
//         searchResult = xnrt.RESTGetResultSet("/REST/projects?format=xml");
//      }
//      catch (Exception ex)
//      {
//         invalidPasswordLabel.setVisible(true);
//			XNATProjectName = null;
//			return;
//      }
//
//		invalidPasswordLabel.setVisible(false);
//
//		DefaultComboBoxModel model = (DefaultComboBoxModel) projectComboBox.getModel();
//		model.removeAllElements();
//		if (searchResult.size() == 0)
//		{
//			model.insertElementAt("No projects available", 0);
//			model.setSelectedItem("No projects available");
//			XNATProjectName = null;
//			uploadButton.setEnabled(false);
//		}
//		else
//		{
//			for (int i=0; i<searchResult.size(); i++)
//				model.insertElementAt(searchResult.atom(0, i), i);
//			model.setSelectedItem(searchResult.atom(0, 0));
//			XNATProjectName = projectComboBox.getModel().getSelectedItem().toString();
//			uploadButton.setEnabled(true);
//		}

    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
            public void run() {
                new XNATDicomLoader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel currentFileLabel;
    private javax.swing.JLabel currentFileOutputLabel;
    private javax.swing.JLabel failuresLabel;
    private javax.swing.JLabel failuresOutputLabel;
    private javax.swing.JLabel filesUploadedLabel;
    private javax.swing.JLabel filesUploadedOutputLabel;
    private javax.swing.JLabel invalidPasswordLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton uploadButton;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JLabel warningsLabel;
    private javax.swing.JLabel warningsOutputLabel;
    // End of variables declaration//GEN-END:variables

}
